#!/bin/sh

set -eu

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

cat > $payload <&0

owner=$(jq -r '.source.owner // ""' < $payload)
repository=$(jq -r '.source.repository // ""' < $payload)
branch_name=$(jq -r '.source.branch_name // "master"' < $payload)
user=$(jq -r '.source.user // ""' < $payload)
api_key=$(jq -r '.source.api_key // ""' < $payload)

result_filter=$(jq -r '.source.result_filter // ""' < $payload)
result_stage_filter=$(jq -r '.source.result_stage_filter // ""' < $payload)
ref=$(jq -r '.version.ref // ""' < $payload)

base_uri="https://api.snap-ci.com/project/${owner}/${repository}/branch/${branch_name}/pipelines"

build="$(basename $(curl_wrapper ${user} ${api_key} ${base_uri}/latest | jq -r '._links.redirect.href // ""'))"

if [ -n "${ref}" ] && [ "${ref}" -ne "${build}" ]; then
    builds=""
    until [ "${build}" -eq "${ref}" ]; do
        builds="${build} ${builds}"
        build=$(basename $(curl_wrapper ${user} ${api_key} ${base_uri}/${build} | jq -r '._links.previous.href'))
    done
    builds="${build} ${builds}"
else
    builds="${build}"
fi


if [ -n "${result_filter}" ]; then
    filtered_builds=""
    echo "check builds ${builds}"
    for build in ${builds}; do
        if [ -n "${result_stage_filter}" ]; then
            result=$(curl_wrapper ${user} ${api_key} ${base_uri}/${build} | jq -r '.stages | map(select(.name == "'${result_stage_filter}'")) | .[0].result')
        else
            result=$(curl_wrapper ${user} ${api_key} ${base_uri}/${build} | jq -r '.result')
        fi
        echo "${build} ${result}"
        if [ "${result}" = "${result_filter}" ]; then
             filtered_builds="${filtered_builds} ${build}"
        fi
    done
    builds="${filtered_builds}"
fi

echo "${builds}" | awk 'BEGIN { OFS="\n" } { $1=$1; print $0 }' | jq -R '.' | jq -s 'map({ref: .})'>&3
